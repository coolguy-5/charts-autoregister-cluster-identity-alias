name: Create EKS Cluster

on:
  workflow_dispatch

jobs:
  create-cluster:
    runs-on: ubuntu-latest
    environment: dev
    
    steps:
    - name: Validate inputs
      run: |
        if [ ${{ secrets.NODE_COUNT }} -lt 3 ]; then
          echo "Error: Node count must be at least 3"
          exit 1
        fi
        
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}
        
    - name: Install eksctl
      run: |
        # Download and install eksctl
        curl --silent --location "https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_$(uname -s)_amd64.tar.gz" | tar xz -C /tmp
        sudo mv /tmp/eksctl /usr/local/bin
        eksctl version
        
    - name: Install kubectl
      run: |
        # Download and install kubectl
        curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
        chmod +x kubectl
        sudo mv kubectl /usr/local/bin/
        kubectl version --client
        
    - name: Create EKS cluster
      run: |
        eksctl create cluster \
          --name ${{ vars.CLUSTER_NAME }} \
          --region ${{ secrets.AWS_REGION }} \
          --nodes ${{ secrets.NODE_COUNT }} \
          --node-type ${{ vars.NODE_TYPE }} \
          --managed \
          --with-oidc
          
    - name: Update kubeconfig
      run: |
        aws eks update-kubeconfig --region ${{ secrets.AWS_REGION }} --name ${{ vars.CLUSTER_NAME }}
          
    - name: Verify cluster creation
      run: |
        # Wait for cluster to be ready
        echo "Waiting for cluster to be ready..."
        kubectl get nodes
        kubectl get pods --all-namespaces
        
    - name: Output cluster info
      run: |
        echo "Cluster created successfully!"
        echo "Cluster name: ${{ vars.CLUSTER_NAME }}"
        echo "Region: ${{ secrets.AWS_REGION }}"
        echo "Nodes: ${{ secrets.NODE_COUNT }}"
        echo "Node type: ${{ vars.NODE_TYPE }}"
        
        # Get cluster endpoint
        aws eks describe-cluster --name ${{ vars.CLUSTER_NAME }} --query 'cluster.endpoint' --output text
        
    - name: Cleanup on failure
      if: failure()
      run: |
        echo "Workflow failed, attempting to cleanup cluster..."
        
        # Try eksctl delete first
        echo "Attempting eksctl delete..."
        eksctl delete cluster --name ${{ vars.CLUSTER_NAME }} --region ${{ secrets.AWS_REGION }} --wait || echo "eksctl delete failed, trying CloudFormation cleanup..."
        
        # Fallback: Delete CloudFormation stacks
        echo "Attempting CloudFormation stack cleanup..."
        
        # Delete cluster stack
        CLUSTER_STACK="eksctl-${{ vars.CLUSTER_NAME }}-cluster"
        aws cloudformation delete-stack --stack-name "$CLUSTER_STACK" --region ${{ secrets.AWS_REGION }} || true
        echo "Initiated deletion of cluster stack: $CLUSTER_STACK"
        
        # Wait a bit for deletions to start
        sleep 30
        
        # Check stack status
        echo "CloudFormation cleanup status:"
        aws cloudformation describe-stacks --stack-name "$CLUSTER_STACK" --region ${{ secrets.AWS_REGION }} --query 'Stacks[0].StackStatus' --output text 2>/dev/null || echo "Cluster stack not found or deleted"
        
        echo "Cleanup attempt completed" 